package com.db.ppt.dementia.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PatientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllPropertiesEquals(Patient expected, Patient actual) {
        assertPatientAutoGeneratedPropertiesEquals(expected, actual);
        assertPatientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllUpdatablePropertiesEquals(Patient expected, Patient actual) {
        assertPatientUpdatableFieldsEquals(expected, actual);
        assertPatientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertPatientMapsIdRelationshipPersistedValue(Patient entityToPersist, Patient persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getUser_petient().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAutoGeneratedPropertiesEquals(Patient expected, Patient actual) {
        assertThat(expected)
            .as("Verify Patient auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableFieldsEquals(Patient expected, Patient actual) {
        assertThat(expected)
            .as("Verify Patient relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getRelationship()).as("check relationship").isEqualTo(actual.getRelationship()))
            .satisfies(e -> assertThat(e.getStage()).as("check stage").isEqualTo(actual.getStage()))
            .satisfies(e -> assertThat(e.getCaregiverNotes()).as("check caregiverNotes").isEqualTo(actual.getCaregiverNotes()))
            .satisfies(e -> assertThat(e.getPrimaryConcerns()).as("check primaryConcerns").isEqualTo(actual.getPrimaryConcerns()))
            .satisfies(e -> assertThat(e.getMedicalHistory()).as("check medicalHistory").isEqualTo(actual.getMedicalHistory()))
            .satisfies(e -> assertThat(e.getMedicationDetails()).as("check medicationDetails").isEqualTo(actual.getMedicationDetails()))
            .satisfies(e -> assertThat(e.getEmergencyContact()).as("check emergencyContact").isEqualTo(actual.getEmergencyContact()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableRelationshipsEquals(Patient expected, Patient actual) {}
}
